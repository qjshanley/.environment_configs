# User specific aliases and functions
alias ..='cd ..'
alias vi='vim -o'
alias lh='ls -lh'
alias lt='ls -lt'
alias lha='ls -lhA'
alias lta='ls -ltA'
alias recent='ls -lhtA | head -n 20'
alias line='printf -- "%*s\n" "$(tput cols)" " " | sed "s/ /-/g"'
alias renew='exec $SHELL --login'

# enable color support of ls and also add handy aliases
if [ -x "$(which dircolors)" ]; then
  test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
  alias ls='ls --color=auto'
  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
fi

function pinger { while true ; do date ; ping -c1 $1 ; sleep 300 ; echo ; done ; }

function shrink { sed -En '/[^\^$]/p' "$@" ; }

function _is_mac { [ "$(uname -s)" == "Darwin" ] && return 0 || return 1 ; }

function LIST { netstat -an | sed -n '1,2p ; /^tcp.*LISTEN/p' ; }

function vpn_config_keys {
  jq -r '.vpn.openvpn | ."ca-cert" , .ta' $1
}

function subenv {
	eval "cat <<- EOF
	  $(<$1)
	EOF
	"
}

function aws-configure {
  read -p  "AWS Access Key ID [None]: "         aws_access_key_id
  read -sp "AWS Secret Access Key [None]: "     aws_secret_access_key ; echo
  read -p  "Default region name [us-east-1]: "  aws_default_region
  read -p  "Default output format [text]:"      aws_default_output
  export AWS_ACCESS_KEY_ID=${aws_access_key_id}
  export AWS_SECRET_ACCESS_KEY=${aws_secret_access_key}
  export AWS_DEFAULT_REGION=${aws_default_region:-us-east-1}
  export AWS_DEFAULT_OUTPUT=${aws_default_output:-text}
}

function compare {
  [ ! -f "$1" ] && { echo File required for ARG 1 ; return 1 ; }
  [ ! -f "$2" ] && { echo File required for ARG 2 ; return 1 ; }
  if [ "$(diff $1 $2)" ] ; then
    local F1_WIDTH="$(( 10 + ( 2 * $(cut -d ' ' -f1 <(wc -L "$1")) ) ))"
    local F2_WIDTH="$(( 10 + ( 2 * $(cut -d ' ' -f1 <(wc -L "$2")) ) ))"
    [ "$F1_WIDTH" -gt "$F2_WIDTH" ] && local WIDTH=$F1_WIDTH || local WIDTH=$F2_WIDTH
    if [ $(( $(tput cols) - $WIDTH )) -lt 0 ] ; then
      diff -W "$(tput cols)" -y "$1" "$2"
    else
      diff -W "$WIDTH" -y "$1" "$2"
    fi
  else
    diff -s $1 $2
  fi
  return 0
}

function pod-api {
  sudo -E docker exec -it -u=postgres postgresql bash -c '
    PG_CURR_DB=pod-api
    env PSQL_EDITOR=$(which vim) psql $PG_CURR_DB
  '
}

function ppass { 
  while true ; do
    read -esp "Password: " p1 && printf -- $'\n'
    read -esp "Confirm password: " p2 && printf -- $'\n'
    [ -n "$p1" -a "$p1" == "$p2" ] && break || printf -- $'Passwords were blank or did not match. Please try again.\n'
  done
  printf -- "$p1"
}

function rpass {
  local n=
  if [ -z "$1" ] ; then
    n=32
  else
    [ "$1" -eq "$1" ] && n="$1" 2>/dev/null || return 1
  fi
  PASSWORD=$(openssl rand "$n" | base64 -w 0 | cut -c "1-$n")
  printf -- 'Generated the random password: %s\n' "$PASSWORD" > /dev/tty
  printf -- "$PASSWORD" > /dev/stdout
}

function eztar {
  object="$(basename $1)"
  [ -e "$object" ] || printf -- "Object (${object}) must exist in your current directory: $?"
  if [ "$(rev <<< "$object" | cut -d '.' -f 1 | rev)" == "enc" ] ; then
    openssl aes-256-cbc -d -in "$object" | tar -xzC "${2:-.}" && cd "${2:-.}"
  else
    tar cz "$object" | openssl aes-256-cbc -e -out "${object}.tar.gz.enc" && rm -rf "$object"
  fi
}

function dex {
  POD="$1" ; shift 1
  [ "$1" == "-k" ] || { rm -f ~/.datica ; shift 1 ; }
  case "$POD" in
    pod02|pod03)
      export DATICA_ENV=d9a425c1-1a68-42ee-9261-0f675e87d70a
      export DATICA_EMAIL=quin@datica.com
      export ACCOUNTS_HOST=https://product.datica.com
      export AUTH_HOST=https://auth.datica.com
      export PAAS_HOST=https://paas-api.catalyze.io
      export DATICA_LOG_LEVEL=info
      export POD_ID="$POD"
      export PODID="$POD"
      ;;
    pod05)
      export DATICA_ENV=8c38fcc0-132b-4580-bdac-673ad392b374
      export DATICA_EMAIL=quin@datica.com
      export ACCOUNTS_HOST=https://product.de.datica.com
      export AUTH_HOST=https://auth.de.datica.com
      export PAAS_HOST=https://paas-api.de.datica.com
      export DATICA_LOG_LEVEL=info
      export POD_ID="$POD"
      export PODID="$POD"
      ;;
    sbox05)
      export DATICA_ENV=
      export DATICA_EMAIL=quin@datica.com
      export ACCOUNTS_HOST=https://product-sandbox.catalyzeapps.com/stratum
      export AUTH_HOST=https://auth-sandbox.catalyzeapps.com
      export PAAS_HOST=https://sandbox-darwin.catalyzeapps.com
      export DATICA_LOG_LEVEL=info
      export POD_ID="$POD"
      export PODID="$POD"
      ;;
    *)
      echo The pod \"$POD\" is not valid. Please use: pod02 pod03 pod05 sbox05
      return 1
      ;;
  esac
}

function corl {
  dex "$1" -k && shift 1 || return 1

  CONTENT_TYPE="Content-Type: application/json"
  ACCEPT="Accept: application/json"
  AUTHORIZATION="Authorization: Bearer $(jq -r .token ~/.datica)" || return 1
  REQ_NONCE="X-Request-Nonce: $(openssl rand -base64 32)"
  REQ_NONCE_TIMESTAMP="X-Request-Timestamp: $(date +%s)"
  X_POD_ID="X-Pod-ID: ${POD_ID}"

  case "$1" in
    /agent-usage*)
      ARGS=( ${PAAS_HOST}${@} )
      ;;
    /orgs*)
      ARGS=( ${AUTH_HOST}${@} )
      ;;
    /environments*)
      ARGS=( ${PAAS_HOST}${@} )
      ;;
    /documents*)
      ARGS=( ${PAAS_HOST}${@} )
      ;;
    '')
      echo Please provide a route or URL
      return 1
      ;;
    *)
      ARGS=( $@ )
      ;;
  esac

  printf -v curl_headers -- '-H "%s" ' \
    "$CONTENT_TYPE" \
    "$ACCEPT" \
    "$AUTHORIZATION" \
    "$REQ_NONCE" \
    "$REQ_NONCE_TIMESTAMP" \
    "$X_POD_ID"

  echo curl --silent ${ARGS[@]} $curl_headers
}

function parse_git_branch {
  git branch 2> /dev/null | sed -n '/^*/s/^* \(.*\)/[\1]/p'
}

function parse_git_branch_color {
  #local git_status="$(git status 2> /dev/null | sed -n '/^On branch/p ; /^Changes not staged for commit:/p ; /^Changes to be committed:/p ; /^Untracked files:/p')"
  local git_status="$(git status 2> /dev/null | sed -n '/^[A-Z]/p')"
  if [ -n "$git_status" ] ; then
    local git_branch="$(sed -n '/^On branch /s/^On branch \(.*\)/[\1]/p' <<< "$git_status")"
    local no_color='\e[0;00m'
    if [ -n "$(IFS=$'\n' ; compgen -W "$git_status" "Untracked files:")" ] ; then
      # red
      local color='\e[1;31m'
    elif [ -n "$(IFS=$'\n' ; compgen -W "$git_status" "Changes not staged for commit:")" ] ; then
      # red
      local color='\e[1;31m'
    elif [ -n "$(IFS=$'\n' ; compgen -W "$git_status" "Changes to be committed:")" ] ; then
      # yellow
      local color='\e[1;33m'
    else
      # green
      local color='\e[1;32m'
    fi
    printf -- "${color}${git_branch}${no_color}"
  fi
}

function escaped_working_dir {
  printf -- '%q' "$(pwd)"
}

function confirm {
  while true ; do
    unset check
    echo
    read -p "${1:-Continue? (y/n/q): }" check < /dev/tty >> /dev/tty
    case "$check" in
      y|yes)      return 0 ;;
      n|no)       return 1 ;;
      q|quit)     return 2 ;;
      *)          continue ;;
    esac
  done
}
